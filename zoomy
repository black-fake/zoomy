#!/bin/bash - 
#===============================================================================
#
#          FILE: zoomy
# 
#         USAGE: ./zoomy 
# 
#   DESCRIPTION: 
# 
#       OPTIONS: ---
#  REQUIREMENTS: ---
#          BUGS: ---
#         NOTES: ---
#        AUTHOR: black-fake (), 
#  ORGANIZATION: 
#       CREATED: 01.10.2021 18:18:54
#      REVISION:  ---
#===============================================================================

config_path="$HOME/.zoomy"
meetings_file='meetings.txt'
filename=testfile.txt

function print_help(){
cat<<EOF
zoomy is a tool to manage and access (recurring and single) zoom meetings

USAGE:		zoomy [options] [<name>]

OPTIONS:
		-a <url>, --add <url>		add a meeting to the list and give it a name

		-r <name>, --remove <name>	remove a meeting by its name

		-l, --list			list saved meetings on the list
EOF
}

function error_message(){
	msg="$1"
	printf "ERROR:\n\t%s\n\tsee 'zoomy --help' for more info" $msg >&2
}

function access_meeting(){
	url="$1"
	xdg-open $url
	exit
}

function add_recurring_meeting(){
	# some code here
	parse_zoom_link "$1"
	meeting_url="$zoom_url"
	read -p 'Name: ' meeting_name
	
	[ ! -f "$config_path/$meetings_file" ] && touch "$config_path/$meetings_file"

	if [[ $(cat "$config_path/$meetings_file" | awk '$1=='$meeting_name' {print}') != "" ]]
	then
		echo "$(awk '{print toupper($0)}' <<< $meeting_name) $meeting_url" >> "$config_path/$meetings_file"
	else
		echo "$meeting_name already exists" >&2
	fi
}

function remove_meeting_url(){
	to_remove=$(awk '{print toupper($0)}' <<< $1)
	rg "$to_remove" >/dev/null <<< $(echo $filename | awk 'print $1') && is_present=true || is_present=false

	if [[ "$is_present" == 'true' ]]
	then
		while read line
		do
			reduced_entries+=("$line")
		done< <(awk "!(/$to_remove/)" $filename)

		printf '' > $filename
		
		amount=${#reduced_entries[@]}
		up_counter=0
		until (( "$up_counter" == "$amount" ))
		do
			echo ${reduced_entries[$up_counter]} >> $filename
			up_counter=$((up_counter+1))
		done
	elif [[ "$is_present" == "false" ]]
	then
		echo "$to_remove has not been found"
	fi
}

function parse_zoom_link(){
	url="$1"

	confno=$(grep -o -E '[0-9]{5,}' <<< "$url")
	passwd=$(grep -o -E 'pwd=[a-zA-Z0-9]+' <<< "$url" | sed 's~pwd=~~')
	server=$(grep -o -E '://.+/' <<< "$url" | sed 's~j/~~;s~/$~~')

	new_url="zoommtg$server/join?action=join&confno=$confno"

	[ "$passwd" != "" ] && new_url="$new_url&pwd=$passwd"
	zoom_url="$new_url"
}


[ -d "$config_path" ] || mkdir "$config_path"

###################################
## parse and check all arguments ##
###################################

#parsing all arguments

loop_rounds=$(bc<<<"scale=0;$#/2+1")
while (( "$loop_rounds" > 0 ))
do
	# actions: add, remove, list, start meeting
	if [[ "$1" == '-a' || "$1" == '--add' ]]
	then
		# add_meeting
		if [[ "$2" != "" ]]
		then
			add_recurring_meeting "$2"
		else
			error_message "missing url"
		fi
		exit
	elif [[ "$1" == '-r' || "$1" == '--remove' ]]
	then
		sleep 0.000000000000001
		# remove_meeting
	elif [[ "$1" == '-l' || "$1" == '--list' ]]
	then
		sleep 0.000000000000001
		# list_meetings
	elif [[ $(rg '^https' <<< "$1") ]]
	then
		echo 'starting meeting'
		parse_zoom_link "$1"
		access_meeting "$zoom_url"
		exit
	elif [[ "$1" == '-h' || "$1" == '--help' ]]
	then
		print_help
		exit
	fi
	shift 2

	loop_rounds=$((loop_rounds-1))
done
